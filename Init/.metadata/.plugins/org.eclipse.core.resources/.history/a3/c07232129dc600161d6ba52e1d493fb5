import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

public abstract class Unit extends Entity implements traverseConstants, Physics {
	
	private static final double JUMP_VELOCITY = 0.5;
	
	/**	Entity's movement speed	*/
	private float speed;
	/**	Entity's image representation	*/
	private Image sprite;
	/**	Height of sprite image in pixels	*/
	private int spriteHeight;
	/**	Width of sprite image in pixels	*/
	private int spriteWidth;
	/**	Speed Entity is moving in the vertical direction	*/
	private double velocity;
	/** A vertically flipped copy of the sprite image	*/
	private Image spriteFlipped;
	/**	If the unit is facing left	*/
	private boolean facingLeft = false;
	
	/**
	 *	@param x starting x coordinate
	 *	@param y starting y coordinate
	 *	@param spriteRef file reference of sprite file
	 */
	Unit(double x, double y, String spriteRef, float speed) throws SlickException
	{
		super(x, y);
		setSprite(spriteRef);
		spriteFlipped = getSprite(true).getFlippedCopy(false, true);
		setSpeed(speed);
		setColliderDimensions(sprite.getWidth(), sprite.getHeight());
	}
	
	/**
	 * Sets Entity's movement speed
	 * @param speed value to set speed to
	 */
	public void setSpeed(float speed) { this.speed = speed; }
	
	/**
	 * @return Entity's movement speed
	 */
	public float getSpeed() { return speed; }
	
	/**
	 * Set Entity's image representation
	 * @param spriteRef File reference of sprite file
	 * @throws SlickException
	 */
	public void setSprite(String spriteRef) throws SlickException { 
		sprite = new Image(spriteRef);
		spriteHeight = sprite.getHeight();
		spriteWidth = sprite.getWidth();
	}
	
	/**
	 * @return Unit's image representation
	 */
	public Image getSprite(boolean flipped) { 
		if (!flipped)
			return sprite;
		return spriteFlipped;
		}
	
	/**
	 * @return Height in pixels of the Unit sprite image
	 */
	public int getSpriteHeight() { return spriteHeight; }
	
	/**
	 * @return Width in pixels of the Unit sprite image
	 */
	public int getSpriteWidth() { return spriteWidth; }
	
	/**
	 * Changes an Unit's position based on movement direction
	 * 
	 * @param dirX direction of movement in x axis
	 * @param dirY direction of movement in y axis
	 * @param delta time passed since last frame (milliseconds)
	 */
	public void changePos(double dirX, double dirY, int delta) {
		double moveX = 0.0;
		double moveY = 0.0;
		if (World.tileTraversable(getCollider(), dirX * delta * speed, XDIRECTION))
			moveX = dirX * delta * speed;
		if (World.tileTraversable(getCollider(), delta * -velocity, YDIRECTION))
			moveY = delta * -velocity;
		else
			velocity = 0.0;
		super.changePos(moveX, moveY);
	}
	
	/**
	 * Render the sprite to the screen
	 */
	public void render() {
		renderCollider();
		getSprite().draw((float) (getX() - sprite.getWidth()/2.0), 
				(float) (getY() - sprite.getHeight()/ 2.0));
	}

	/**
	 * Update Unit's game state applies physics
	 * @param dirX direction of movement in the x direction
	 * @param dirY direction of movement in the y direction
	 * @param delta time passed since last frame (milliseconds)
	 */
	public void update(double dirX, double dirY, boolean jump, int delta) {
		if (jump)
			jump();
		velocity = vertAccelerate(velocity, delta);
		System.out.println(velocity);
		changePos(dirX, dirY, delta);
	}

	/** Update units Game state	*/
	@Override
	public void update() {
		// TODO Auto-generated method stub
		
	}
	
	/** Gives unit upward velocity to be affected by physics*/
	private void jump() {
		if (velocity == 0.0)
			velocity = JUMP_VELOCITY;
	}
	
	
	
}
