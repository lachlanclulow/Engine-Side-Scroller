import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

public abstract class Entity implements traverseConstants, Physics {
	
	/**	Entity's x coordinate	*/
	private double x;
	/**	Entity's y coordinate	*/
	private double y;
	/**	Entity's movement speed	*/
	private float speed;
	/**	Entity's image representation	*/
	private Image sprite;
	/**	Height of sprite image in pixels	*/
	private int spriteHeight;
	/**	Width of sprite image in pixels	*/
	private int spriteWidth;
	/**	Speed Entity is moving in the vertical direction	*/
	/**
	 * @return Entity's x coordinate
	 */
	public double getX() { return x; }
	
	/**
	 * Set Entity's x coordinate
	 * @param x value to set x coordinate to
	 */
	public void setX(double x) { this.x = x; }
	
	/**
	 * @return Entity's y coordinate
	 */
	public double getY(){ return y; }
	
	/**
	 * Set Entity's y coordinate
	 * @param y value to set y coordinate to
	 */
	public void setY(double y) { this.y = y; }
	
	/**
	 * Set Entity's Coordinates
	 * @param x value to set x coordinate to
	 * @param y value to set y coordinate to
	 */
	public void setCoordinates(double x, double y) {
		setX(x);
		setY(y);
	}
	
	/**
	 * Sets Entity's movement speed
	 * @param speed value to set speed to
	 */
	public void setSpeed(float speed) { this.speed = speed; }
	
	/**
	 * @return Entity's movement speed
	 */
	public float getSpeed() { return speed; }
	
	/**
	 * Set Entity's image representation
	 * @param spriteRef File reference of sprite file
	 * @throws SlickException
	 */
	public void setSprite(String spriteRef) throws SlickException { 
		sprite = new Image(spriteRef);
		spriteHeight = sprite.getHeight();
		spriteWidth = sprite.getWidth();
	}
	
	/**
	 * @return Entity's image representation
	 */
	public Image getSprite() { return sprite; }
	
	/**
	 * @return Height in pixels of the Entity sprite image
	 */
	public int getSpriteHeight() { return spriteHeight; }
	
	/**
	 * @return Width in pixels of the Entity sprite image
	 */
	public int getSpriteWidth() { return spriteWidth; }
	
	/**
	 * Changes an Entity's position based on movement direction
	 * 
	 * @param dirX direction of movement in x axis
	 * @param dirY direction of movement in y axis
	 * @param delta time passed since last frame (milliseconds)
	 */
	public void changePos(double dirX, double dirY, int delta) {
		if (World.tileTraversable(x, y, dirX * delta * speed, XDIRECTION))
			x += dirX * delta * speed;
		if (World.tileTraversable(x, y, dirY * delta * speed, YDIRECTION))
			y += dirY * delta * speed;
	}
	
	/**	Render Entity on the screen	*/
	public abstract void render();
	
	/** Update Entity's game state	*/
	public abstract void update();
}
